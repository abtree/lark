// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.1
// source: special.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ERankListType int32

const (
	ERankListType_ERLT_Union          ERankListType = 0  //公会排行
	ERankListType_ERLT_Level          ERankListType = 1  //等级排行
	ERankListType_ERLT_Hero           ERankListType = 2  //英雄排行
	ERankListType_ERLT_LostTower      ERankListType = 3  //奈乐宫排行
	ERankListType_ERLT_CJ             ERankListType = 4  //成就排行
	ERankListType_ERLT_UnionBoss      ERankListType = 5  //公会战排行
	ERankListType_ERLT_Hero_World     ERankListType = 6  //单服英雄
	ERankListType_ERLT_Hero_Bak       ERankListType = 7  //上期全服英雄排行
	ERankListType_ERLT_Hero_World_Bak ERankListType = 8  //上期单服英雄排行
	ERankListType_ERLT_LostTower_Bak  ERankListType = 9  //上期奈乐宫排行
	ERankListType_ERLT_UnionTask      ERankListType = 10 //公会战备战活动排行榜
)

// Enum value maps for ERankListType.
var (
	ERankListType_name = map[int32]string{
		0:  "ERLT_Union",
		1:  "ERLT_Level",
		2:  "ERLT_Hero",
		3:  "ERLT_LostTower",
		4:  "ERLT_CJ",
		5:  "ERLT_UnionBoss",
		6:  "ERLT_Hero_World",
		7:  "ERLT_Hero_Bak",
		8:  "ERLT_Hero_World_Bak",
		9:  "ERLT_LostTower_Bak",
		10: "ERLT_UnionTask",
	}
	ERankListType_value = map[string]int32{
		"ERLT_Union":          0,
		"ERLT_Level":          1,
		"ERLT_Hero":           2,
		"ERLT_LostTower":      3,
		"ERLT_CJ":             4,
		"ERLT_UnionBoss":      5,
		"ERLT_Hero_World":     6,
		"ERLT_Hero_Bak":       7,
		"ERLT_Hero_World_Bak": 8,
		"ERLT_LostTower_Bak":  9,
		"ERLT_UnionTask":      10,
	}
)

func (x ERankListType) Enum() *ERankListType {
	p := new(ERankListType)
	*p = x
	return p
}

func (x ERankListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERankListType) Descriptor() protoreflect.EnumDescriptor {
	return file_special_proto_enumTypes[0].Descriptor()
}

func (ERankListType) Type() protoreflect.EnumType {
	return &file_special_proto_enumTypes[0]
}

func (x ERankListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERankListType.Descriptor instead.
func (ERankListType) EnumDescriptor() ([]byte, []int) {
	return file_special_proto_rawDescGZIP(), []int{0}
}

//用于排行的数据
type MsgRankListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                         //ID 用于索引 玩家相关排行榜即为玩家GUID
	Score         int32  `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`                   //用于排行的数据
	Name          string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                      //名称
	Level         uint32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`                   //等级
	Icon          uint32 `protobuf:"varint,5,opt,name=Icon,proto3" json:"Icon,omitempty"`                     //头像
	UnionName     string `protobuf:"bytes,6,opt,name=UnionName,proto3" json:"UnionName,omitempty"`            //工会名称
	UpdateTime    int64  `protobuf:"varint,7,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`         //更新时间
	YesterdayRank int32  `protobuf:"zigzag32,8,opt,name=YesterdayRank,proto3" json:"YesterdayRank,omitempty"` //昨日排行
	SubScore      int64  `protobuf:"varint,9,opt,name=SubScore,proto3" json:"SubScore,omitempty"`             //子积分，用于一个积分不够用的情况（如工会）
	//.... 下面为具体排行榜的独有数据
	HeadTitle     uint32   `protobuf:"varint,14,opt,name=HeadTitle,proto3" json:"HeadTitle,omitempty"`                //称号
	HeadFrame     uint32   `protobuf:"varint,15,opt,name=HeadFrame,proto3" json:"HeadFrame,omitempty"`                //头像框
	ActivePlayers []uint64 `protobuf:"varint,16,rep,packed,name=ActivePlayers,proto3" json:"ActivePlayers,omitempty"` //激活的玩家
}

func (x *MsgRankListItem) Reset() {
	*x = MsgRankListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_special_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRankListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRankListItem) ProtoMessage() {}

func (x *MsgRankListItem) ProtoReflect() protoreflect.Message {
	mi := &file_special_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRankListItem.ProtoReflect.Descriptor instead.
func (*MsgRankListItem) Descriptor() ([]byte, []int) {
	return file_special_proto_rawDescGZIP(), []int{0}
}

func (x *MsgRankListItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MsgRankListItem) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MsgRankListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsgRankListItem) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MsgRankListItem) GetIcon() uint32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *MsgRankListItem) GetUnionName() string {
	if x != nil {
		return x.UnionName
	}
	return ""
}

func (x *MsgRankListItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *MsgRankListItem) GetYesterdayRank() int32 {
	if x != nil {
		return x.YesterdayRank
	}
	return 0
}

func (x *MsgRankListItem) GetSubScore() int64 {
	if x != nil {
		return x.SubScore
	}
	return 0
}

func (x *MsgRankListItem) GetHeadTitle() uint32 {
	if x != nil {
		return x.HeadTitle
	}
	return 0
}

func (x *MsgRankListItem) GetHeadFrame() uint32 {
	if x != nil {
		return x.HeadFrame
	}
	return 0
}

func (x *MsgRankListItem) GetActivePlayers() []uint64 {
	if x != nil {
		return x.ActivePlayers
	}
	return nil
}

type MsgRankListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           ERankListType      `protobuf:"varint,1,opt,name=Type,proto3,enum=pb.ERankListType" json:"Type,omitempty"` //类型
	ChildType      int32              `protobuf:"varint,2,opt,name=ChildType,proto3" json:"ChildType,omitempty"`             //子类型
	GroupID        int32              `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`                 //分组ID
	Rank           []*MsgRankListItem `protobuf:"bytes,4,rep,name=Rank,proto3" json:"Rank,omitempty"`                        //
	Index          map[uint64]int32   `protobuf:"bytes,5,rep,name=Index,proto3" json:"Index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	Del            map[uint64]bool    `protobuf:"bytes,6,rep,name=Del,proto3" json:"Del,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NewDayTime     int64              `protobuf:"varint,7,opt,name=NewDayTime,proto3" json:"NewDayTime,omitempty"`                                                                                                    //跨天时间
	YesterdayIndex map[uint64]int32   `protobuf:"bytes,8,rep,name=YesterdayIndex,proto3" json:"YesterdayIndex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"` //昨日排行结果
	Key            string             `protobuf:"bytes,9,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *MsgRankListData) Reset() {
	*x = MsgRankListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_special_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRankListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRankListData) ProtoMessage() {}

func (x *MsgRankListData) ProtoReflect() protoreflect.Message {
	mi := &file_special_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgRankListData.ProtoReflect.Descriptor instead.
func (*MsgRankListData) Descriptor() ([]byte, []int) {
	return file_special_proto_rawDescGZIP(), []int{1}
}

func (x *MsgRankListData) GetType() ERankListType {
	if x != nil {
		return x.Type
	}
	return ERankListType_ERLT_Union
}

func (x *MsgRankListData) GetChildType() int32 {
	if x != nil {
		return x.ChildType
	}
	return 0
}

func (x *MsgRankListData) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *MsgRankListData) GetRank() []*MsgRankListItem {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *MsgRankListData) GetIndex() map[uint64]int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *MsgRankListData) GetDel() map[uint64]bool {
	if x != nil {
		return x.Del
	}
	return nil
}

func (x *MsgRankListData) GetNewDayTime() int64 {
	if x != nil {
		return x.NewDayTime
	}
	return 0
}

func (x *MsgRankListData) GetYesterdayIndex() map[uint64]int32 {
	if x != nil {
		return x.YesterdayIndex
	}
	return nil
}

func (x *MsgRankListData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_special_proto protoreflect.FileDescriptor

var file_special_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0d, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x48, 0x65, 0x61, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x48, 0x65,
	0x61, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xb7, 0x04,
	0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73,
	0x67, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2e, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x44, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4e, 0x65, 0x77, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x0e, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x59, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08,
	0x44, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xe0, 0x01, 0x0a, 0x0d, 0x45, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x4c,
	0x54, 0x5f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x4c,
	0x54, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x4c,
	0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x4c, 0x54,
	0x5f, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x52, 0x4c, 0x54, 0x5f, 0x43, 0x4a, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x4c,
	0x54, 0x5f, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x52, 0x4c, 0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x4c, 0x54, 0x5f, 0x48, 0x65, 0x72, 0x6f, 0x5f,
	0x42, 0x61, 0x6b, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x4c, 0x54, 0x5f, 0x48, 0x65,
	0x72, 0x6f, 0x5f, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x42, 0x61, 0x6b, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x52, 0x4c, 0x54, 0x5f, 0x4c, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x42, 0x61, 0x6b, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x4c, 0x54, 0x5f, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x0a, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e,
	0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_special_proto_rawDescOnce sync.Once
	file_special_proto_rawDescData = file_special_proto_rawDesc
)

func file_special_proto_rawDescGZIP() []byte {
	file_special_proto_rawDescOnce.Do(func() {
		file_special_proto_rawDescData = protoimpl.X.CompressGZIP(file_special_proto_rawDescData)
	})
	return file_special_proto_rawDescData
}

var file_special_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_special_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_special_proto_goTypes = []interface{}{
	(ERankListType)(0),      // 0: pb.ERankListType
	(*MsgRankListItem)(nil), // 1: pb.MsgRankListItem
	(*MsgRankListData)(nil), // 2: pb.MsgRankListData
	nil,                     // 3: pb.MsgRankListData.IndexEntry
	nil,                     // 4: pb.MsgRankListData.DelEntry
	nil,                     // 5: pb.MsgRankListData.YesterdayIndexEntry
}
var file_special_proto_depIdxs = []int32{
	0, // 0: pb.MsgRankListData.Type:type_name -> pb.ERankListType
	1, // 1: pb.MsgRankListData.Rank:type_name -> pb.MsgRankListItem
	3, // 2: pb.MsgRankListData.Index:type_name -> pb.MsgRankListData.IndexEntry
	4, // 3: pb.MsgRankListData.Del:type_name -> pb.MsgRankListData.DelEntry
	5, // 4: pb.MsgRankListData.YesterdayIndex:type_name -> pb.MsgRankListData.YesterdayIndexEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_special_proto_init() }
func file_special_proto_init() {
	if File_special_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_special_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRankListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_special_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRankListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_special_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_special_proto_goTypes,
		DependencyIndexes: file_special_proto_depIdxs,
		EnumInfos:         file_special_proto_enumTypes,
		MessageInfos:      file_special_proto_msgTypes,
	}.Build()
	File_special_proto = out.File
	file_special_proto_rawDesc = nil
	file_special_proto_goTypes = nil
	file_special_proto_depIdxs = nil
}
