// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.1
// source: auto_system.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Jelasticsearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableCert bool     `protobuf:"varint,1,opt,name=enable_cert,json=enableCert,proto3" json:"enable_cert,omitempty"`
	CaCert     string   `protobuf:"bytes,2,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Address    []string `protobuf:"bytes,3,rep,name=address,proto3" json:"address,omitempty"`
	Username   string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password   string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Jelasticsearch) Reset() {
	*x = Jelasticsearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jelasticsearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jelasticsearch) ProtoMessage() {}

func (x *Jelasticsearch) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jelasticsearch.ProtoReflect.Descriptor instead.
func (*Jelasticsearch) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{0}
}

func (x *Jelasticsearch) GetEnableCert() bool {
	if x != nil {
		return x.EnableCert
	}
	return false
}

func (x *Jelasticsearch) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *Jelasticsearch) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Jelasticsearch) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jelasticsearch) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Jetcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints    []string `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Username     string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password     string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Schema       string   `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	ReadTimeout  int32    `protobuf:"zigzag32,5,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout int32    `protobuf:"zigzag32,6,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	DialTimeout  int32    `protobuf:"zigzag32,7,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
}

func (x *Jetcd) Reset() {
	*x = Jetcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jetcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jetcd) ProtoMessage() {}

func (x *Jetcd) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jetcd.ProtoReflect.Descriptor instead.
func (*Jetcd) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{1}
}

func (x *Jetcd) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Jetcd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jetcd) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Jetcd) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Jetcd) GetReadTimeout() int32 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *Jetcd) GetWriteTimeout() int32 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

func (x *Jetcd) GetDialTimeout() int32 {
	if x != nil {
		return x.DialTimeout
	}
	return 0
}

type Jgrpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout               int32 `protobuf:"zigzag32,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ConnectionLimit       int32 `protobuf:"zigzag32,2,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`
	StreamsLimit          int32 `protobuf:"zigzag32,3,opt,name=streams_limit,json=streamsLimit,proto3" json:"streams_limit,omitempty"`
	MaxRecvMsgSize        int32 `protobuf:"zigzag32,4,opt,name=max_recv_msg_size,json=maxRecvMsgSize,proto3" json:"max_recv_msg_size,omitempty"`
	MaxConnectionIdle     int32 `protobuf:"zigzag32,5,opt,name=max_connection_idle,json=maxConnectionIdle,proto3" json:"max_connection_idle,omitempty"`
	MaxConnectionAge      int32 `protobuf:"zigzag32,6,opt,name=max_connection_age,json=maxConnectionAge,proto3" json:"max_connection_age,omitempty"`
	MaxConnectionAgeGrace int32 `protobuf:"zigzag32,7,opt,name=max_connection_age_grace,json=maxConnectionAgeGrace,proto3" json:"max_connection_age_grace,omitempty"`
	Time                  int32 `protobuf:"zigzag32,8,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Jgrpc) Reset() {
	*x = Jgrpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jgrpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jgrpc) ProtoMessage() {}

func (x *Jgrpc) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jgrpc.ProtoReflect.Descriptor instead.
func (*Jgrpc) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{2}
}

func (x *Jgrpc) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Jgrpc) GetConnectionLimit() int32 {
	if x != nil {
		return x.ConnectionLimit
	}
	return 0
}

func (x *Jgrpc) GetStreamsLimit() int32 {
	if x != nil {
		return x.StreamsLimit
	}
	return 0
}

func (x *Jgrpc) GetMaxRecvMsgSize() int32 {
	if x != nil {
		return x.MaxRecvMsgSize
	}
	return 0
}

func (x *Jgrpc) GetMaxConnectionIdle() int32 {
	if x != nil {
		return x.MaxConnectionIdle
	}
	return 0
}

func (x *Jgrpc) GetMaxConnectionAge() int32 {
	if x != nil {
		return x.MaxConnectionAge
	}
	return 0
}

func (x *Jgrpc) GetMaxConnectionAgeGrace() int32 {
	if x != nil {
		return x.MaxConnectionAgeGrace
	}
	return 0
}

func (x *Jgrpc) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Jjaeger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogSpans            bool   `protobuf:"varint,1,opt,name=log_spans,json=logSpans,proto3" json:"log_spans,omitempty"`
	BufferFlushInterval int32  `protobuf:"zigzag32,2,opt,name=buffer_flush_interval,json=bufferFlushInterval,proto3" json:"buffer_flush_interval,omitempty"`
	MaxPacketSize       int32  `protobuf:"zigzag32,3,opt,name=max_packet_size,json=maxPacketSize,proto3" json:"max_packet_size,omitempty"`
	Enable              bool   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	HostPort            string `protobuf:"bytes,5,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	SamplerType         string `protobuf:"bytes,6,opt,name=sampler_type,json=samplerType,proto3" json:"sampler_type,omitempty"`
	Param               int32  `protobuf:"zigzag32,7,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *Jjaeger) Reset() {
	*x = Jjaeger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jjaeger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jjaeger) ProtoMessage() {}

func (x *Jjaeger) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jjaeger.ProtoReflect.Descriptor instead.
func (*Jjaeger) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{3}
}

func (x *Jjaeger) GetLogSpans() bool {
	if x != nil {
		return x.LogSpans
	}
	return false
}

func (x *Jjaeger) GetBufferFlushInterval() int32 {
	if x != nil {
		return x.BufferFlushInterval
	}
	return 0
}

func (x *Jjaeger) GetMaxPacketSize() int32 {
	if x != nil {
		return x.MaxPacketSize
	}
	return 0
}

func (x *Jjaeger) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Jjaeger) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *Jjaeger) GetSamplerType() string {
	if x != nil {
		return x.SamplerType
	}
	return ""
}

func (x *Jjaeger) GetParam() int32 {
	if x != nil {
		return x.Param
	}
	return 0
}

type Jkafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partition      int32  `protobuf:"zigzag32,1,opt,name=partition,proto3" json:"partition,omitempty"`
	ReadTimeOut    int32  `protobuf:"zigzag32,2,opt,name=readTimeOut,proto3" json:"readTimeOut,omitempty"`
	WriteTimeOut   int32  `protobuf:"zigzag32,3,opt,name=writeTimeOut,proto3" json:"writeTimeOut,omitempty"`
	WriteRetry     int32  `protobuf:"zigzag32,4,opt,name=writeRetry,proto3" json:"writeRetry,omitempty"`
	AllowAutoTopic bool   `protobuf:"varint,5,opt,name=allowAutoTopic,proto3" json:"allowAutoTopic,omitempty"`
	Address        string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Jkafka) Reset() {
	*x = Jkafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jkafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jkafka) ProtoMessage() {}

func (x *Jkafka) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jkafka.ProtoReflect.Descriptor instead.
func (*Jkafka) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{4}
}

func (x *Jkafka) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *Jkafka) GetReadTimeOut() int32 {
	if x != nil {
		return x.ReadTimeOut
	}
	return 0
}

func (x *Jkafka) GetWriteTimeOut() int32 {
	if x != nil {
		return x.WriteTimeOut
	}
	return 0
}

func (x *Jkafka) GetWriteRetry() int32 {
	if x != nil {
		return x.WriteRetry
	}
	return 0
}

func (x *Jkafka) GetAllowAutoTopic() bool {
	if x != nil {
		return x.AllowAutoTopic
	}
	return false
}

func (x *Jkafka) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Jlogger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowLine      bool              `protobuf:"varint,1,opt,name=show_line,json=showLine,proto3" json:"show_line,omitempty"`
	EncodeLevel   string            `protobuf:"bytes,2,opt,name=encode_level,json=encodeLevel,proto3" json:"encode_level,omitempty"`
	StacktraceKey string            `protobuf:"bytes,3,opt,name=stacktrace_key,json=stacktraceKey,proto3" json:"stacktrace_key,omitempty"`
	LogStdout     bool              `protobuf:"varint,4,opt,name=log_stdout,json=logStdout,proto3" json:"log_stdout,omitempty"`
	CallerType    int32             `protobuf:"zigzag32,5,opt,name=caller_type,json=callerType,proto3" json:"caller_type,omitempty"`
	Segment       *Jlogger_Jsegment `protobuf:"bytes,6,opt,name=segment,proto3" json:"segment,omitempty"`
	Path          string            `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	Directory     string            `protobuf:"bytes,8,opt,name=directory,proto3" json:"directory,omitempty"`
	Encoder       string            `protobuf:"bytes,9,opt,name=encoder,proto3" json:"encoder,omitempty"`
}

func (x *Jlogger) Reset() {
	*x = Jlogger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jlogger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jlogger) ProtoMessage() {}

func (x *Jlogger) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jlogger.ProtoReflect.Descriptor instead.
func (*Jlogger) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{5}
}

func (x *Jlogger) GetShowLine() bool {
	if x != nil {
		return x.ShowLine
	}
	return false
}

func (x *Jlogger) GetEncodeLevel() string {
	if x != nil {
		return x.EncodeLevel
	}
	return ""
}

func (x *Jlogger) GetStacktraceKey() string {
	if x != nil {
		return x.StacktraceKey
	}
	return ""
}

func (x *Jlogger) GetLogStdout() bool {
	if x != nil {
		return x.LogStdout
	}
	return false
}

func (x *Jlogger) GetCallerType() int32 {
	if x != nil {
		return x.CallerType
	}
	return 0
}

func (x *Jlogger) GetSegment() *Jlogger_Jsegment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *Jlogger) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Jlogger) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *Jlogger) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

type Jmongo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db          string `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	Direct      bool   `protobuf:"varint,5,opt,name=direct,proto3" json:"direct,omitempty"`
	Timeout     int32  `protobuf:"zigzag32,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MaxPoolSize int32  `protobuf:"zigzag32,7,opt,name=max_pool_size,json=maxPoolSize,proto3" json:"max_pool_size,omitempty"`
}

func (x *Jmongo) Reset() {
	*x = Jmongo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jmongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jmongo) ProtoMessage() {}

func (x *Jmongo) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jmongo.ProtoReflect.Descriptor instead.
func (*Jmongo) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{6}
}

func (x *Jmongo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Jmongo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jmongo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Jmongo) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *Jmongo) GetDirect() bool {
	if x != nil {
		return x.Direct
	}
	return false
}

func (x *Jmongo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Jmongo) GetMaxPoolSize() int32 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

type Jmysql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxIdleConn  int32  `protobuf:"zigzag32,1,opt,name=max_idle_conn,json=maxIdleConn,proto3" json:"max_idle_conn,omitempty"`
	ConnLifetime int32  `protobuf:"zigzag32,2,opt,name=conn_lifetime,json=connLifetime,proto3" json:"conn_lifetime,omitempty"`
	Charset      string `protobuf:"bytes,3,opt,name=charset,proto3" json:"charset,omitempty"`
	Address      string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Username     string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password     string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Db           string `protobuf:"bytes,7,opt,name=db,proto3" json:"db,omitempty"`
	MaxOpenConn  int32  `protobuf:"zigzag32,8,opt,name=max_open_conn,json=maxOpenConn,proto3" json:"max_open_conn,omitempty"`
}

func (x *Jmysql) Reset() {
	*x = Jmysql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jmysql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jmysql) ProtoMessage() {}

func (x *Jmysql) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jmysql.ProtoReflect.Descriptor instead.
func (*Jmysql) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{7}
}

func (x *Jmysql) GetMaxIdleConn() int32 {
	if x != nil {
		return x.MaxIdleConn
	}
	return 0
}

func (x *Jmysql) GetConnLifetime() int32 {
	if x != nil {
		return x.ConnLifetime
	}
	return 0
}

func (x *Jmysql) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *Jmysql) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Jmysql) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Jmysql) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Jmysql) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *Jmysql) GetMaxOpenConn() int32 {
	if x != nil {
		return x.MaxOpenConn
	}
	return 0
}

type Jredis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix   string   `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Address  []string `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"`
	Db       int32    `protobuf:"zigzag32,3,opt,name=db,proto3" json:"db,omitempty"`
	Password string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Jredis) Reset() {
	*x = Jredis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jredis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jredis) ProtoMessage() {}

func (x *Jredis) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jredis.ProtoReflect.Descriptor instead.
func (*Jredis) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{8}
}

func (x *Jredis) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Jredis) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Jredis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Jredis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

//Servers
type CfgServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ServerId uint32 `protobuf:"varint,3,opt,name=ServerId,proto3" json:"ServerId,omitempty"`
	Port     uint32 `protobuf:"varint,4,opt,name=Port,proto3" json:"Port,omitempty"`
	HttpPort uint32 `protobuf:"varint,5,opt,name=HttpPort,proto3" json:"HttpPort,omitempty"`
	DBName   string `protobuf:"bytes,6,opt,name=DBName,proto3" json:"DBName,omitempty"`
	Cert     bool   `protobuf:"varint,7,opt,name=Cert,proto3" json:"Cert,omitempty"`
	CertKey  string `protobuf:"bytes,8,opt,name=CertKey,proto3" json:"CertKey,omitempty"`
	CertPem  string `protobuf:"bytes,9,opt,name=CertPem,proto3" json:"CertPem,omitempty"`
	CertName string `protobuf:"bytes,10,opt,name=CertName,proto3" json:"CertName,omitempty"`
	Host     string `protobuf:"bytes,11,opt,name=Host,proto3" json:"Host,omitempty"`
}

func (x *CfgServers) Reset() {
	*x = CfgServers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CfgServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CfgServers) ProtoMessage() {}

func (x *CfgServers) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CfgServers.ProtoReflect.Descriptor instead.
func (*CfgServers) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{9}
}

func (x *CfgServers) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CfgServers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CfgServers) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *CfgServers) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CfgServers) GetHttpPort() uint32 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

func (x *CfgServers) GetDBName() string {
	if x != nil {
		return x.DBName
	}
	return ""
}

func (x *CfgServers) GetCert() bool {
	if x != nil {
		return x.Cert
	}
	return false
}

func (x *CfgServers) GetCertKey() string {
	if x != nil {
		return x.CertKey
	}
	return ""
}

func (x *CfgServers) GetCertPem() string {
	if x != nil {
		return x.CertPem
	}
	return ""
}

func (x *CfgServers) GetCertName() string {
	if x != nil {
		return x.CertName
	}
	return ""
}

func (x *CfgServers) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type MsgSysConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unhandle      map[string][]byte      `protobuf:"bytes,1,rep,name=unhandle,proto3" json:"unhandle,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Elasticsearch *Jelasticsearch        `protobuf:"bytes,2,opt,name=Elasticsearch,proto3" json:"Elasticsearch,omitempty"`
	Etcd          *Jetcd                 `protobuf:"bytes,3,opt,name=Etcd,proto3" json:"Etcd,omitempty"`
	Grpc          *Jgrpc                 `protobuf:"bytes,4,opt,name=Grpc,proto3" json:"Grpc,omitempty"`
	Jaeger        *Jjaeger               `protobuf:"bytes,5,opt,name=Jaeger,proto3" json:"Jaeger,omitempty"`
	Kafka         *Jkafka                `protobuf:"bytes,6,opt,name=Kafka,proto3" json:"Kafka,omitempty"`
	Logger        *Jlogger               `protobuf:"bytes,7,opt,name=Logger,proto3" json:"Logger,omitempty"`
	Mongo         *Jmongo                `protobuf:"bytes,8,opt,name=Mongo,proto3" json:"Mongo,omitempty"`
	Mysql         *Jmysql                `protobuf:"bytes,9,opt,name=Mysql,proto3" json:"Mysql,omitempty"`
	Redis         *Jredis                `protobuf:"bytes,10,opt,name=Redis,proto3" json:"Redis,omitempty"`
	Servers       map[uint32]*CfgServers `protobuf:"bytes,11,rep,name=Servers,proto3" json:"Servers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgSysConfigs) Reset() {
	*x = MsgSysConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSysConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSysConfigs) ProtoMessage() {}

func (x *MsgSysConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSysConfigs.ProtoReflect.Descriptor instead.
func (*MsgSysConfigs) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{10}
}

func (x *MsgSysConfigs) GetUnhandle() map[string][]byte {
	if x != nil {
		return x.Unhandle
	}
	return nil
}

func (x *MsgSysConfigs) GetElasticsearch() *Jelasticsearch {
	if x != nil {
		return x.Elasticsearch
	}
	return nil
}

func (x *MsgSysConfigs) GetEtcd() *Jetcd {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *MsgSysConfigs) GetGrpc() *Jgrpc {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *MsgSysConfigs) GetJaeger() *Jjaeger {
	if x != nil {
		return x.Jaeger
	}
	return nil
}

func (x *MsgSysConfigs) GetKafka() *Jkafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *MsgSysConfigs) GetLogger() *Jlogger {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *MsgSysConfigs) GetMongo() *Jmongo {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *MsgSysConfigs) GetMysql() *Jmysql {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *MsgSysConfigs) GetRedis() *Jredis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *MsgSysConfigs) GetServers() map[uint32]*CfgServers {
	if x != nil {
		return x.Servers
	}
	return nil
}

type Jlogger_Jsegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize    int32 `protobuf:"zigzag32,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	MaxAge     int32 `protobuf:"zigzag32,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxBackups int32 `protobuf:"zigzag32,3,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"`
	Compress   bool  `protobuf:"varint,4,opt,name=compress,proto3" json:"compress,omitempty"`
}

func (x *Jlogger_Jsegment) Reset() {
	*x = Jlogger_Jsegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auto_system_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jlogger_Jsegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jlogger_Jsegment) ProtoMessage() {}

func (x *Jlogger_Jsegment) ProtoReflect() protoreflect.Message {
	mi := &file_auto_system_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jlogger_Jsegment.ProtoReflect.Descriptor instead.
func (*Jlogger_Jsegment) Descriptor() ([]byte, []int) {
	return file_auto_system_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Jlogger_Jsegment) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Jlogger_Jsegment) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *Jlogger_Jsegment) GetMaxBackups() int32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *Jlogger_Jsegment) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

var File_auto_system_proto protoreflect.FileDescriptor

var file_auto_system_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x4a, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x05, 0x4a, 0x65, 0x74, 0x63, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x64, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x05, 0x4a, 0x67,
	0x72, 0x70, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63,
	0x76, 0x4d, 0x73, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x07, 0x4a, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x4a, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75,
	0x74, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x07, 0x4a, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x4a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1a, 0x7b, 0x0a, 0x08, 0x4a, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x06, 0x4a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x06, 0x4a, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x22, 0x66, 0x0a, 0x06, 0x4a, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x43, 0x66, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x65, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x65, 0x72, 0x74, 0x50,
	0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x22, 0xd9, 0x04, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x79,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x65, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0d, 0x45, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x04, 0x45, 0x74,
	0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x65,
	0x74, 0x63, 0x64, 0x52, 0x04, 0x45, 0x74, 0x63, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x47, 0x72, 0x70,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x67, 0x72,
	0x70, 0x63, 0x52, 0x04, 0x47, 0x72, 0x70, 0x63, 0x12, 0x23, 0x0a, 0x06, 0x4a, 0x61, 0x65, 0x67,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4a, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12,
	0x23, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x06, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x52,
	0x05, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x52, 0x05, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x20, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4a, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x66, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_auto_system_proto_rawDescOnce sync.Once
	file_auto_system_proto_rawDescData = file_auto_system_proto_rawDesc
)

func file_auto_system_proto_rawDescGZIP() []byte {
	file_auto_system_proto_rawDescOnce.Do(func() {
		file_auto_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_auto_system_proto_rawDescData)
	})
	return file_auto_system_proto_rawDescData
}

var file_auto_system_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_auto_system_proto_goTypes = []interface{}{
	(*Jelasticsearch)(nil),   // 0: pb.Jelasticsearch
	(*Jetcd)(nil),            // 1: pb.Jetcd
	(*Jgrpc)(nil),            // 2: pb.Jgrpc
	(*Jjaeger)(nil),          // 3: pb.Jjaeger
	(*Jkafka)(nil),           // 4: pb.Jkafka
	(*Jlogger)(nil),          // 5: pb.Jlogger
	(*Jmongo)(nil),           // 6: pb.Jmongo
	(*Jmysql)(nil),           // 7: pb.Jmysql
	(*Jredis)(nil),           // 8: pb.Jredis
	(*CfgServers)(nil),       // 9: pb.CfgServers
	(*MsgSysConfigs)(nil),    // 10: pb.MsgSysConfigs
	(*Jlogger_Jsegment)(nil), // 11: pb.Jlogger.Jsegment
	nil,                      // 12: pb.MsgSysConfigs.UnhandleEntry
	nil,                      // 13: pb.MsgSysConfigs.ServersEntry
}
var file_auto_system_proto_depIdxs = []int32{
	11, // 0: pb.Jlogger.segment:type_name -> pb.Jlogger.Jsegment
	12, // 1: pb.MsgSysConfigs.unhandle:type_name -> pb.MsgSysConfigs.UnhandleEntry
	0,  // 2: pb.MsgSysConfigs.Elasticsearch:type_name -> pb.Jelasticsearch
	1,  // 3: pb.MsgSysConfigs.Etcd:type_name -> pb.Jetcd
	2,  // 4: pb.MsgSysConfigs.Grpc:type_name -> pb.Jgrpc
	3,  // 5: pb.MsgSysConfigs.Jaeger:type_name -> pb.Jjaeger
	4,  // 6: pb.MsgSysConfigs.Kafka:type_name -> pb.Jkafka
	5,  // 7: pb.MsgSysConfigs.Logger:type_name -> pb.Jlogger
	6,  // 8: pb.MsgSysConfigs.Mongo:type_name -> pb.Jmongo
	7,  // 9: pb.MsgSysConfigs.Mysql:type_name -> pb.Jmysql
	8,  // 10: pb.MsgSysConfigs.Redis:type_name -> pb.Jredis
	13, // 11: pb.MsgSysConfigs.Servers:type_name -> pb.MsgSysConfigs.ServersEntry
	9,  // 12: pb.MsgSysConfigs.ServersEntry.value:type_name -> pb.CfgServers
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_auto_system_proto_init() }
func file_auto_system_proto_init() {
	if File_auto_system_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auto_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jelasticsearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jetcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jgrpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jjaeger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jkafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jlogger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jmongo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jmysql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jredis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CfgServers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSysConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auto_system_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jlogger_Jsegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auto_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_auto_system_proto_goTypes,
		DependencyIndexes: file_auto_system_proto_depIdxs,
		MessageInfos:      file_auto_system_proto_msgTypes,
	}.Build()
	File_auto_system_proto = out.File
	file_auto_system_proto_rawDesc = nil
	file_auto_system_proto_goTypes = nil
	file_auto_system_proto_depIdxs = nil
}
